/*********************************************************************************************************************
 * File name  : camera_set.cpp-USB2.0 USB3.0摄像头多线程读取头文件
 * Target core: EB FZ3B
 *  Created on: 2021年4月25日
*   Team name: 深闳远拓
 *      Author: Six0Ne
 *                                           CUCJUMITS_17_完全模型
 *                                        集美大学诚毅学院电子创新实验室
 *                                  "In me the tiger sniffs the rose."
 **********************************************************************************************************************/
#ifndef CAMERASET_HPP
#define CAMERASET_HPP
#include "/root/workspace/ShenHongYT_17th/Six0Ne.hpp"

 /////////////////////////////////////////////////////////////////////////////////////////////////////////////
 /////////////////////////////////////////////////////////////////////////////////////////////////////////////
 /////////////////////////////////////////////////////////////////////////////////////////////////////////////




 /////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////类声明区////////////////////////////////////////////////////////
 /////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Camerathread
{
private:
	cv::VideoCapture* Camera0;
	cv::VideoCapture* Camera1;
	cv::Mat* Camera0_Frame;
	cv::Mat* Camera1_Frame;
	std::mutex* Camera0_Mutex;
	std::mutex* Camera1_Mutex;
	std::thread* Camera0_Thread;
	std::thread* Camera1_Thread;
	bool Camera0_IsOpen;
	bool Camera1_IsOpen;

	void CameraInit();
	void Camera0Frame();
	void Camera1Frame();
public:
	Camerathread();
	~Camerathread();
	int Camera0FPS = 0, Camera1FPS = 0;
	bool Camera0_isOpened()
	{
		return Camera0_IsOpen;
	}
	bool Camera1_isOpened()
	{
		return Camera1_IsOpen;
	}
	void release()
	{
		Camera0_IsOpen = false;
		Camera1_IsOpen = false;
	}
	bool readCamera0(cv::Mat& frame0);
	bool readCamera1(cv::Mat& frame1);
};


extern Camerathread  Camera;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////函数声明区//////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
int CameraConfiguration(cv::VideoCapture& Camera, cv::Mat& img_raw, int index, int CameraH, int CameraW);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////




#endif /* CAMERASET_HPP */